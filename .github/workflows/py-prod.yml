name: Python application Production

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.11.3'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Validate Django
        run: | 
          python -c "import django; print(django.__version__)"
          python manage.py check
      
      - name: Unit Tests
        run: |
          python manage.py test
      
      - name: Code Analysis
        run: |
          pylint --fail-under=5 --disable=C,R,W,E1101,E0307 api/
      
      - name: Code Coverage
        run: |
          coverage run manage.py test
          coverage report
      
      - name: Docker Login
        run: |
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
      
      - name: Set up Docker BuildX
        uses: docker/setup-buildx-action@v1
      
      - name: Build & Push Docker Image
        env:
          DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}/devsu-demo-python
        run: |
          docker build -t $DOCKER_REPO:${{ github.sha }} .
          docker tag $DOCKER_REPO:${{ github.sha }} $DOCKER_REPO:latest
          docker push $DOCKER_REPO:${{ github.sha }}
          docker push $DOCKER_REPO:latest
      
      - name: Generate Kubernetes configs
        run: |
          echo "Kubernetes configs are stored in repository"
          
      - name: Verify Kubernetes configs
        run: |
          kubectl apply --dry-run=client -f k8s/
          
      - name: Deployment Info
        run: |
          echo "Para desplegar en tu Kubernetes local:"
          echo "1. Descarga la Ãºltima imagen: docker pull ${{ secrets.DOCKER_USERNAME }}/devsu-demo-python:latest"
          echo "2. Aplica las configuraciones: kubectl apply -f k8s/"
      
      - name: Configure Kubernetes
        uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl rollout restart deployment devsu-demo-python
